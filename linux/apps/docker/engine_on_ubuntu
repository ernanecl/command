# https://docs.docker.com/engine/install/ubuntu/
# https://linuxhint.com/install_docker_linux_mint/
# Uninstall old versions
  sudo apt-get remove docker docker-engine docker.io containerd runc

# Install using the repository
# 1. Update the apt package index and install packages to allow apt to use a repository over HTTPS:
  sudo apt-get update
  sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

# Another option
  sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

# 2. Add Docker’s official GPG key:
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Another option
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# 3. Use the following command to set up the stable repository. To add the nightly or test repository, add the word nightly or test (or both) after the word stable in the commands below.
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker Engine
# 1. Update the apt package index, and install the latest version of Docker Engine and containerd, or go to the next step to install a specific version:
  sudo apt-get update
  sudo apt-get install docker-ce docker-ce-cli containerd.io

# 2. To install a specific version of Docker Engine, list the available versions in the repo, then select and install:
# a. List the versions available in your repo:
  apt-cache madison docker-ce

# b. Install a specific version using the version string from the second column, for example, 5:18.09.1~3-0~ubuntu-xenial.
  sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io

# 3. Verify that Docker Engine is installed correctly by running the hello-world image.
  sudo docker run hello-world


#--------------------------------------------------------------------------------------------------------------------------------------------#
# Install from a package
# 1. Go to https://download.docker.com/linux/ubuntu/dists/, choose your Ubuntu version, then browse to pool/stable/, choose amd64, armhf, arm64, or s390x, and download the .deb file for the Docker Engine version you want to install.
# 2. Install Docker Engine, changing the path below to the path where you downloaded the Docker package.
  sudo dpkg -i /path/to/package.deb

# 3. Verify that Docker Engine is installed correctly by running the hello-world image.
  sudo docker run hello-world


#--------------------------------------------------------------------------------------------------------------------------------------------#
# Install using the convenience script
# Tip: preview script steps before running
# You can run the script with the DRY_RUN=1 option to learn what steps the script will execute during installation:
  curl -fsSL https://get.docker.com -o get-docker.sh
  DRY_RUN=1 sh ./get-docker.sh

# This example downloads the script from get.docker.com and runs it to install the latest stable release of Docker on Linux:
  curl -fsSL https://get.docker.com -o get-docker.sh
  sudo sh get-docker.sh

# Install pre-releases
# Docker also provides a convenience script at test.docker.com to install pre-releases of Docker on Linux. This script is equivalent to the script at get.docker.com, but configures your package manager to enable the “test” channel from our package repository.
# To install the latest version of Docker on Linux from the “test” channel, run:
  curl -fsSL https://test.docker.com -o test-docker.sh
  sudo sh test-docker.sh


#--------------------------------------------------------------------------------------------------------------------------------------------#
# Uninstall the Docker Engine, CLI, and Containerd packages:
  sudo apt-get purge docker-ce docker-ce-cli containerd.io

# Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes:
  sudo rm -rf /var/lib/docker
  sudo rm -rf /var/lib/containerd